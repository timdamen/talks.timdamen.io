---
// PDFCarousel.astro
export interface Props {
  pdfUrl: string;
  width?: number;
  height?: number;
  className?: string;
}

const { pdfUrl, width = 800, height = 600, className = '' } = Astro.props;
console.log('PDF URL:', pdfUrl);
---

<div class={`pdf-carousel ${className}`} data-pdf-url={pdfUrl}>
  <div class="carousel-container">
    <canvas id="pdf-canvas" width={width} height={height}></canvas>
    <div class="carousel-controls">
      <button id="prev-btn" class="nav-btn" disabled>
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
        Previous
      </button>
      <span id="page-info" class="page-info">Page 1 of 1</span>
      <button id="next-btn" class="nav-btn" disabled>
        Next
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
    </div>
  </div>
</div>

<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>

<script>
  // Set PDF.js worker source
  if (typeof pdfjsLib !== 'undefined') {
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
  }

  class PDFCarousel {
    constructor(container) {
      this.container = container;
      this.pdfDoc = null;
      this.currentPage = 1;
      this.totalPages = 0;
      this.canvas = container.querySelector('#pdf-canvas');
      this.ctx = this.canvas.getContext('2d');
      this.prevBtn = container.querySelector('#prev-btn');
      this.nextBtn = container.querySelector('#next-btn');
      this.pageInfo = container.querySelector('#page-info');
      
      this.init();
    }

    async init() {
      try {
        // Wait for PDF.js to be available
        if (typeof pdfjsLib === 'undefined') {
          console.error('PDF.js library not loaded');
          return;
        }

        const pdfUrl = this.container.dataset.pdfUrl;
        if (!pdfUrl) {
          console.error('PDF URL not provided');
          return;
        }

        // Load PDF
        const loadingTask = pdfjsLib.getDocument(pdfUrl);
        this.pdfDoc = await loadingTask.promise;
        this.totalPages = this.pdfDoc.numPages;
        
        // Render first page
        await this.renderPage(1);
        
        // Set up event listeners
        this.setupEventListeners();
        
        // Update UI
        this.updateUI();
      } catch (error) {
        console.error('Error loading PDF:', error);
        this.showError('Failed to load PDF');
      }
    }

    setupEventListeners() {
      this.prevBtn.addEventListener('click', () => this.previousPage());
      this.nextBtn.addEventListener('click', () => this.nextPage());
      
      // Keyboard navigation (only for this instance)
      this.keydownHandler = (e) => {
        if (e.key === 'ArrowLeft') this.previousPage();
        if (e.key === 'ArrowRight') this.nextPage();
      };
      document.addEventListener('keydown', this.keydownHandler);
    }

    async renderPage(pageNum) {
      try {
        const page = await this.pdfDoc.getPage(pageNum);
        const viewport = page.getViewport({ scale: 1 });
        
        // Calculate scale to fit canvas
        const scaleX = this.canvas.width / viewport.width;
        const scaleY = this.canvas.height / viewport.height;
        const scale = Math.min(scaleX, scaleY);
        
        const scaledViewport = page.getViewport({ scale });
        
        // Center the page on canvas
        const offsetX = (this.canvas.width - scaledViewport.width) / 2;
        const offsetY = (this.canvas.height - scaledViewport.height) / 2;
        
        // Clear canvas
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Fill background
        this.ctx.fillStyle = '#ffffff';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Save context and translate
        this.ctx.save();
        this.ctx.translate(offsetX, offsetY);
        
        const renderContext = {
          canvasContext: this.ctx,
          viewport: scaledViewport
        };
        
        await page.render(renderContext).promise;
        this.ctx.restore();
        
      } catch (error) {
        console.error('Error rendering page:', error);
        this.showError('Failed to render page');
      }
    }

    previousPage() {
      if (this.currentPage > 1) {
        this.currentPage--;
        this.renderPage(this.currentPage);
        this.updateUI();
      }
    }

    nextPage() {
      if (this.currentPage < this.totalPages) {
        this.currentPage++;
        this.renderPage(this.currentPage);
        this.updateUI();
      }
    }

    updateUI() {
      this.prevBtn.disabled = this.currentPage <= 1;
      this.nextBtn.disabled = this.currentPage >= this.totalPages;
      this.pageInfo.textContent = `Page ${this.currentPage} of ${this.totalPages}`;
    }

    showError(message) {
      this.ctx.fillStyle = '#ff6b6b';
      this.ctx.font = '20px Arial';
      this.ctx.textAlign = 'center';
      this.ctx.fillText(message, this.canvas.width / 2, this.canvas.height / 2);
    }

    // Cleanup method
    destroy() {
      if (this.keydownHandler) {
        document.removeEventListener('keydown', this.keydownHandler);
      }
    }
  }

  // Initialize PDF carousels
  function initializePDFCarousels() {
    const carousels = document.querySelectorAll('.pdf-carousel:not([data-initialized])');
    
    carousels.forEach(carousel => {
      // Mark as initialized to prevent double initialization
      carousel.dataset.initialized = 'true';
      
      // Wait for PDF.js to be available
      const tryInitialize = () => {
        if (typeof pdfjsLib !== 'undefined') {
          new PDFCarousel(carousel);
        } else {
          setTimeout(tryInitialize, 100);
        }
      };
      
      tryInitialize();
    });
  }

  // Initialize on DOMContentLoaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePDFCarousels);
  } else {
    initializePDFCarousels();
  }

  // Re-initialize after navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', initializePDFCarousels);
  
  // Also try with a slight delay in case astro:page-load isn't available
  document.addEventListener('astro:after-swap', () => {
    setTimeout(initializePDFCarousels, 100);
  });

  // Fallback for manual navigation detection
  let lastUrl = location.href;
  new MutationObserver(() => {
    const url = location.href;
    if (url !== lastUrl) {
      lastUrl = url;
      setTimeout(initializePDFCarousels, 100);
    }
  }).observe(document, { subtree: true, childList: true });
</script>

<style>
  .pdf-carousel {
    max-width: 100%;
    margin: 0 auto;
    background: #f5f5f5;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .carousel-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
  }

  #pdf-canvas {
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    max-width: 100%;
    height: auto;
  }

  .carousel-controls {
    display: flex;
    align-items: center;
    gap: 20px;
    flex-wrap: wrap;
    justify-content: center;
  }

  .nav-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 24px;
    background: #007acc;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .nav-btn:hover:not(:disabled) {
    background: #005a9e;
    transform: translateY(-1px);
  }

  .nav-btn:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
  }

  .nav-btn svg {
    width: 18px;
    height: 18px;
  }

  .page-info {
    font-size: 16px;
    font-weight: 500;
    color: #333;
    padding: 8px 16px;
    background: white;
    border-radius: 4px;
    border: 1px solid #ddd;
    min-width: 120px;
    text-align: center;
  }

  @media (max-width: 768px) {
    .pdf-carousel {
      padding: 15px;
    }

    .carousel-controls {
      gap: 15px;
    }

    .nav-btn {
      padding: 10px 20px;
      font-size: 14px;
    }

    .page-info {
      font-size: 14px;
      min-width: 100px;
    }
  }
</style>